# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-react
#   labels:
#     app: redis-react
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis-react
#   template:
#     metadata:
#       labels:
#         app: redis-react
#     spec:
#       containers:
#         - name: redis-react
#           image: theleurki/redis-react:1.0
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 80
#           env:
#             - name: REACT_APP_API_URL
#               value: "http://node-redis.default.svc.cluster.local:8080"  # Points to backend
#           resources:
#             limits:
#               memory: "512Mi"
#               cpu: "500m"

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-react
# spec:
#   selector:
#     app: redis-react
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#   type: LoadBalancer  # Pour accéder depuis l'extérieur


# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-react
#   labels:
#     app: redis-react
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis-react
#   template:
#     metadata:
#       labels:
#         app: redis-react
#     spec:
#       containers:
#         - name: redis-react
#           image: theleurki/redis-react:1.0
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 80
#           env:
#             - name: REACT_APP_API_URL
#               value: "http://node-redis:8080"  # URL interne dans le cluster
#           resources:
#             limits:
#               memory: "512Mi"
#               cpu: "500m"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-react
# spec:
#   selector:
#     app: redis-react
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#   type: LoadBalancer  # Expose vers l'extérieur

apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: front
  template:
    metadata:
      labels:
        app: front
    spec:
      containers:
        - name: front
          image: theleurki/redis-react:1.0
          ports:
            - containerPort: 3000
          env:
            - name: REACT_APP_API_URL
              valueFrom:
                configMapKeyRef:
                  name: frontend-config
                  key: REACT_APP_API_URL
---
apiVersion: v1
kind: Service
metadata:
  name: front-service
spec:
  selector:
    app: front
  ports:
    - protocol: TCP
      port: 80            # Port externe sur lequel le service sera accessible
      targetPort: 3000    # Port interne du conteneur
  type: LoadBalancer     # Change en NodePort si tu préfères l'option NodePort

